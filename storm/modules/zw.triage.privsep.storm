// Get the proper meta:source node for Hatching Triage
// Args: n/a
// Returns: meta:source node
function getMetaSource() {
    [ meta:source=$modconf.source :name="hatching triage public cloud" ]
    return($node)
}

// Model an overview report from Hatching Triage
// Args:
//  - report (dict): overview report data
// Returns: n/a
function modelOverviewReport(report) {
    // get the file:bytes node
    [file:bytes=$report.sample.sha256 :md5=$report.sample.md5 :sha1=$report.sample.sha1]

    // get the file bytes if we don't have them
    if (not $lib.bytes.has(:sha256)) {
        // TODO: get sample bytes
        // https://tria.ge/docs/cloud-api/samples/#get-samplessampleidsample
        $lib.warn("don't have bytes for this sample")
    }

    $sampleFileBytes = $node

    // parse the report timestamp
    $completed_ts = $lib.time.parse($report.sample.completed, "%Y-%m-%dT%H:%M:%SZ")

    // edge our source
    $src = $getMetaSource()
    [ <(seen)+ { yield $src } .seen=$completed_ts]

    // add family aka
    for $family in $report.analysis.family {
        [ +#rep.triage.$family ]
    }

    // add tags
    // some of these are config values, don't do them
    // botnet:zxcv
    // campaign:zxcv
    for $tag in $report.analysis.tags {
        // if there is a : in the tag, it is a config value (or family, which is already handled)
        // skip it
        // there is also "suricata", which means the dynamic execution network traffic hit on a
        // suricata rule
        if ($tag.find(":") = $lib.null and $tag != "suricata") { [ +#rep.triage.$tag] }
    }

    // model config
    for $extracted in $report.extracted {
        // config section is optional
        if ($extracted.config) {
            // make sure there is a family name available
            // if not, can't properly model the config
            $fam = $extracted.config.family
            if ($fam = $lib.null) {
                continue
            }

            // loop through each config item
            // this is a tuple, key @ 0, value @ 1
            for ($key, $val) in $extracted.config {
                // TODO: model more of these
                // https://tria.ge/docs/cloud-api/overview-report/ Config struct
                switch $key {
                    "botnet": { $val = $val.replace(".", "_") [ +#desc.config.$fam.botnet.$val ] }
                    "campaign": { $val = $val.replace(".", "_") [ +#desc.config.$fam.campaign.$val ] }
                    "version": { $val = $val.replace(".", "_") [ +#desc.config.$fam.version.$val ] }
                    "keys": {
                        for $key in $val {
                            // TODO: tag the type of key
                            // TODO: add support for naming the key usage
                            { [( inet:passwd=$key.value +#rep.triage.$fam +#desc.config.$fam.passwd <(seen)+ { yield $src} )] }
                            [ +(refs)> { inet:passwd=$key.value } ]
                        }
                    }
                    "c2": {
                        for $c2 in $val {
                            // try it as an inet:server
                            ($ok, $norm) = $lib.trycast(inet:server, $c2)
                            if $ok {
                                // good as a server, model it
                                // TODO add support for inet:server
                                $lib.warn("no support for inet:server C2 modeling yet")
                                continue
                            }

                            // try it as a URL
                            ($ok, $norm) = $lib.trycast(inet:url, $c2)

                            if (not $ok) {
                                // no dice on inet:server or inet:url
                                // most likely asdf.com:1234 type value
                                // example: 220212-qrkqcaefam
                                // slap a tcp:// in front of it and yolo it 
                                $c2 = $lib.str.concat("tcp://", $c2)

                                // re-cast it to model as url
                                ($ok, $norm) = $lib.trycast(inet:url, $c2)
                            }

                            if $ok {
                                // value is good as a URL, model it
                                // example for proper url from the report: 220221-wa3sgsbgbj
                                { [( inet:url=$norm +#rep.triage.$fam +#desc.config.$fam.c2 <(seen)+ { yield $src } )] }
                                { [( inet:http:request=(:sha256, $norm, triage) :url=$norm :exe=$sampleFileBytes +#rep.triage.$fam <(seen)+ { yield $src } )] }
                                continue
                            }

                            $lib.warn($lib.str.concat("couldn't model a C2 server, this is a bug: ", $c2))
                        }
                    }
                    "decoy": {
                        // decoy domains only get #rep.triage, not with the family name
                        // they also get desc.config.$fam.decoy
                        // the inet:dns:request gets #rep.triage.$fam
                        // TODO: validate no other form types will come in here
                        for $domain in $val {
                            { [( inet:fqdn=$domain +#rep.triage +#desc.config.$fam.decoy <(seen)+ { yield $src } )] }
                            { [( inet:dns:request=(:sha256, $domain, triage) :query:name:fqdn=$domain :exe=$sampleFileBytes +#rep.triage.$fam <(seen)+ { yield $src } )] }
                        }
                    }
                    "mutex": {
                        for $mutex in $val {
                            { [( it:dev:mutex=$mutex +#rep.triage.$fam +#desc.config.$fam.mutex <(seen)+ { yield $src } )] }
                            { [( it:exec:mutex=(:sha256, $mutex, triage) :exe=$sampleFileBytes :name=$mutex +#rep.triage.$fam <(seen)+ { yield $src } )] }
                        }
                    }
                }
            }
        }
    }

    fini { return() }
}